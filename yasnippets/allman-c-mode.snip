# allman-c-mode yasnippet definition file
# using ;; as split char
# experimenting with multiline snippets through the use of \n
main;;amain;;int main(int argc, char* argv[])\n{\n$0\n}
for;;afor;;for (${1:int} ${2:i} = ${3:0}; $2 < ${4:STOP}; ++$2)\n{\n$0\n}
# no, sometimes you need int, other times std::size_t, other times unsigned ...
# really, you should just be able to edit the type
# unsigned ints seem to come up more often because you're comparing against
# .size() and .length()
# signed-for;;asfor;;for (int ${1:i} = ${2:0}; $1 < ${3:STOP}; ++$1)\n{\n$0\n}
while;;awhile;;while (${1:<condition>})\n{\n$0\n}
do-while;;adowhile;;do\n{\n$0\n} while (${1:<condition>});
if;;aif;;if (${1:<condition>})\n{\n$0\n}
if-else;;aifel;;if (${1:<condition>})\n{\n$0\n}\nelse\n{\n\n}
else-if;;aelif;;else if (${1:<condition>})\n{\n$0\n}
else;;aelse;;else\n{\n$0\n}
switch;;aswitch;;switch (${1:<expression>})\n{\ncase ${2:<constant1>}:\n$0\nbreak;\n}
case;;acase;;case ${1:<constantN>}:\n$0\nbreak;
try;;atry;;try\n{\n$0\n}
catch;;acatch;;catch (${1:<exception>})\n{\n$0\n}
# kind of messy, so just do try and catch separately
#try-catch;;atc;;try\n{\n$0\n}\ncatch\n{\n\n}
# not really specific to the Allman style, but it's nice to have sections
section;;sect;;/**** ${1:<section>} ****/\n$0
# you know what would be really cool?  defining that single line thing as a
# subsection and having a section be three lines, with the top and bottom
# asterisk lines shrinking and expanding as you type in more characters
# what I think you'd do is have
# /*****(some-func $1)*****
# ***** ${1:<section>} ****
# ******(some-func $1)****/
# so that some-func just replaces any character with an asterisk
# there's probably an easy way to do that with regexp, but I don't know how
# you'd dynamically evaluate it
# it's obviously possible, though; I recommend looking into the yasnippet code
# to figure out how it's done with the numbered arguments (notice how
# $1 (some string) $2 $1
# will change the 1's